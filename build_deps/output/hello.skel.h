/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __HELLO_BPF_SKEL_H__
#define __HELLO_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct hello_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *tracepoint__syscalls__sys_enter_execve;
	} progs;
	struct {
		struct bpf_link *tracepoint__syscalls__sys_enter_execve;
	} links;
	struct hello_bpf__rodata {
	} *rodata;

#ifdef __cplusplus
	static inline struct hello_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct hello_bpf *open_and_load();
	static inline int load(struct hello_bpf *skel);
	static inline int attach(struct hello_bpf *skel);
	static inline void detach(struct hello_bpf *skel);
	static inline void destroy(struct hello_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
hello_bpf__destroy(struct hello_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
hello_bpf__create_skeleton(struct hello_bpf *obj);

static inline struct hello_bpf *
hello_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct hello_bpf *obj;
	int err;

	obj = (struct hello_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = hello_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	hello_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct hello_bpf *
hello_bpf__open(void)
{
	return hello_bpf__open_opts(NULL);
}

static inline int
hello_bpf__load(struct hello_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct hello_bpf *
hello_bpf__open_and_load(void)
{
	struct hello_bpf *obj;
	int err;

	obj = hello_bpf__open();
	if (!obj)
		return NULL;
	err = hello_bpf__load(obj);
	if (err) {
		hello_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
hello_bpf__attach(struct hello_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
hello_bpf__detach(struct hello_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *hello_bpf__elf_bytes(size_t *sz);

static inline int
hello_bpf__create_skeleton(struct hello_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "hello_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "hello_bp.rodata";
	s->maps[0].map = &obj->maps.rodata;
	s->maps[0].mmaped = (void **)&obj->rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "tracepoint__syscalls__sys_enter_execve";
	s->progs[0].prog = &obj->progs.tracepoint__syscalls__sys_enter_execve;
	s->progs[0].link = &obj->links.tracepoint__syscalls__sys_enter_execve;

	s->data = (void *)hello_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *hello_bpf__elf_bytes(size_t *sz)
{
	*sz = 5504;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x40\x10\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x15\0\
\x01\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x0e\0\0\0\x85\0\0\0\x06\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x48\x65\x6c\x6c\x6f\x20\x77\x6f\x72\
\x6c\x64\x21\x0a\0\x47\x50\x4c\0\x01\x11\x01\x25\x0e\x13\x05\x03\x0e\x10\x17\
\x1b\x0e\x11\x01\x12\x06\0\0\x02\x2e\x01\x11\x01\x12\x06\x40\x18\x97\x42\x19\
\x03\x0e\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x03\x34\0\x03\x0e\x49\x13\
\x3a\x0b\x3b\x0b\x02\x18\0\0\x04\x05\0\x03\x0e\x3a\x0b\x3b\x0b\x49\x13\0\0\x05\
\x01\x01\x49\x13\0\0\x06\x21\0\x49\x13\x37\x0b\0\0\x07\x26\0\x49\x13\0\0\x08\
\x24\0\x03\x0e\x3e\x0b\x0b\x0b\0\0\x09\x24\0\x03\x0e\x0b\x0b\x3e\x0b\0\0\x0a\
\x34\0\x03\x0e\x49\x13\x3a\x0b\x3b\x0b\0\0\x0b\x0f\0\x49\x13\0\0\x0c\x15\x01\
\x49\x13\x27\x19\0\0\x0d\x05\0\x49\x13\0\0\x0e\x18\0\0\0\x0f\x16\0\x49\x13\x03\
\x0e\x3a\x0b\x3b\x0b\0\0\x10\x34\0\x03\x0e\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\
\x18\0\0\x11\x13\x01\x03\x0e\x0b\x0b\x3a\x0b\x3b\x05\0\0\x12\x0d\0\x03\x0e\x49\
\x13\x3a\x0b\x3b\x05\x38\x0b\0\0\0\x9a\x01\0\0\x04\0\0\0\0\0\x08\x01\0\0\0\0\
\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\x02\0\0\0\0\0\0\0\0\
\x30\0\0\0\x01\x5a\0\0\0\0\x01\x05\xe8\0\0\0\x03\0\0\0\0\x64\0\0\0\x01\x07\x09\
\x03\0\0\0\0\0\0\0\0\x04\0\0\0\0\x01\x05\xef\0\0\0\0\x05\x70\0\0\0\x06\x7c\0\0\
\0\x0e\0\x07\x75\0\0\0\x08\0\0\0\0\x06\x01\x09\0\0\0\0\x08\x07\x0a\0\0\0\0\x8e\
\0\0\0\x03\xb1\x07\x93\0\0\0\x0b\x98\0\0\0\x0c\xa9\0\0\0\x0d\xb0\0\0\0\x0d\xb5\
\0\0\0\x0e\0\x08\0\0\0\0\x05\x08\x0b\x70\0\0\0\x0f\xc0\0\0\0\0\0\0\0\x02\x12\
\x08\0\0\0\0\x07\x04\x10\0\0\0\0\xdc\0\0\0\x01\x0b\x09\x03\0\0\0\0\0\0\0\0\x05\
\x75\0\0\0\x06\x7c\0\0\0\x04\0\x08\0\0\0\0\x05\x04\x0b\xf4\0\0\0\x11\0\0\0\0\
\x40\x02\x55\x38\x12\0\0\0\0\x32\x01\0\0\x02\x56\x38\0\x12\0\0\0\0\xa9\0\0\0\
\x02\x57\x38\x08\x12\0\0\0\0\x7e\x01\0\0\x02\x58\x38\x10\x12\0\0\0\0\x91\x01\0\
\0\x02\x59\x38\x40\0\x11\0\0\0\0\x08\x02\x8f\x1a\x12\0\0\0\0\x70\x01\0\0\x02\
\x90\x1a\0\x12\0\0\0\0\x77\x01\0\0\x02\x91\x1a\x02\x12\0\0\0\0\x77\x01\0\0\x02\
\x92\x1a\x03\x12\0\0\0\0\xe8\0\0\0\x02\x93\x1a\x04\0\x08\0\0\0\0\x07\x02\x08\0\
\0\0\0\x08\x01\x05\x8a\x01\0\0\x06\x7c\0\0\0\x06\0\x08\0\0\0\0\x07\x08\x05\x75\
\0\0\0\x06\x7c\0\0\0\0\0\0\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\
\x20\x31\x31\x2e\x31\x2e\x30\x20\x28\x41\x6d\x61\x7a\x6f\x6e\x20\x4c\x69\x6e\
\x75\x78\x20\x32\x20\x31\x31\x2e\x31\x2e\x30\x2d\x31\x2e\x61\x6d\x7a\x6e\x32\
\x2e\x30\x2e\x32\x29\0\x68\x65\x6c\x6c\x6f\x2e\x62\x70\x66\x2e\x63\0\x2f\x68\
\x6f\x6d\x65\x2f\x64\x69\x6e\x65\x73\x68\x6d\x75\x72\x75\x67\x69\x61\x68\x2f\
\x6c\x69\x62\x62\x70\x66\x2f\x73\x74\x75\x64\x79\x2f\x45\x42\x50\x46\x5f\x54\
\x6f\x6f\x6c\x73\0\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x63\x68\x61\x72\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x62\x70\x66\
\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\x74\x6b\0\x6c\x6f\x6e\x67\x20\x69\
\x6e\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x33\
\x32\0\x4c\x49\x43\x45\x4e\x53\x45\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\
\x5f\x5f\x73\x79\x73\x63\x61\x6c\x6c\x73\x5f\x5f\x73\x79\x73\x5f\x65\x6e\x74\
\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x69\x6e\x74\0\x63\x74\x78\0\x65\x6e\x74\
\0\x74\x79\x70\x65\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\
\x66\x6c\x61\x67\x73\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\
\x70\x72\x65\x65\x6d\x70\x74\x5f\x63\x6f\x75\x6e\x74\0\x70\x69\x64\0\x74\x72\
\x61\x63\x65\x5f\x65\x6e\x74\x72\x79\0\x69\x64\0\x61\x72\x67\x73\0\x6c\x6f\x6e\
\x67\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x64\x61\x74\
\x61\0\x74\x72\x61\x63\x65\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\
\x73\x5f\x65\x6e\x74\x65\x72\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xd0\x01\0\0\xd0\
\x01\0\0\xa6\x01\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x04\0\0\x04\x40\0\0\
\0\x1b\0\0\0\x03\0\0\0\0\0\0\0\x1f\0\0\0\x07\0\0\0\x40\0\0\0\x22\0\0\0\x09\0\0\
\0\x80\0\0\0\x27\0\0\0\x0c\0\0\0\0\x02\0\0\x2e\0\0\0\x04\0\0\x04\x08\0\0\0\x3a\
\0\0\0\x04\0\0\0\0\0\0\0\x3f\0\0\0\x05\0\0\0\x10\0\0\0\x45\0\0\0\x05\0\0\0\x18\
\0\0\0\x53\0\0\0\x06\0\0\0\x20\0\0\0\x57\0\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\
\x66\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\x74\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\
\x01\x78\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\x81\0\0\0\0\0\0\x01\x08\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x08\0\0\0\x0a\0\0\0\x06\0\0\0\x93\0\0\0\0\
\0\0\x01\x04\0\0\0\x20\0\0\0\xa7\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\
\0\0\0\x03\0\0\0\0\x0b\0\0\0\x0a\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\x0d\x06\0\0\0\
\xac\0\0\0\x01\0\0\0\xb0\0\0\0\x01\0\0\x0c\x0d\0\0\0\0\0\0\0\0\0\0\x0a\x0b\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0f\0\0\0\x0a\0\0\0\x0e\0\0\0\x5f\x01\0\0\0\0\0\
\x0e\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x0a\0\0\0\x04\0\0\0\
\x8e\x01\0\0\0\0\0\x0e\x12\0\0\0\x01\0\0\0\x96\x01\0\0\x01\0\0\x0f\0\0\0\0\x11\
\0\0\0\0\0\0\0\x0e\0\0\0\x9e\x01\0\0\x01\0\0\x0f\0\0\0\0\x13\0\0\0\0\0\0\0\x04\
\0\0\0\0\x74\x72\x61\x63\x65\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\
\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x65\x6e\x74\0\x69\x64\0\x61\x72\x67\x73\0\
\x5f\x5f\x64\x61\x74\x61\0\x74\x72\x61\x63\x65\x5f\x65\x6e\x74\x72\x79\0\x74\
\x79\x70\x65\0\x66\x6c\x61\x67\x73\0\x70\x72\x65\x65\x6d\x70\x74\x5f\x63\x6f\
\x75\x6e\x74\0\x70\x69\x64\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\
\x72\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x69\x6e\x74\0\
\x6c\x6f\x6e\x67\x20\x69\x6e\x74\0\x6c\x6f\x6e\x67\x20\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\
\x54\x59\x50\x45\x5f\x5f\0\x63\x68\x61\x72\0\x63\x74\x78\0\x74\x72\x61\x63\x65\
\x70\x6f\x69\x6e\x74\x5f\x5f\x73\x79\x73\x63\x61\x6c\x6c\x73\x5f\x5f\x73\x79\
\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x74\x72\x61\x63\x65\
\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\
\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x2f\x68\x6f\x6d\x65\x2f\x64\
\x69\x6e\x65\x73\x68\x6d\x75\x72\x75\x67\x69\x61\x68\x2f\x6c\x69\x62\x62\x70\
\x66\x2f\x73\x74\x75\x64\x79\x2f\x45\x42\x50\x46\x5f\x54\x6f\x6f\x6c\x73\x2f\
\x68\x65\x6c\x6c\x6f\x2e\x62\x70\x66\x2e\x63\0\x09\x62\x70\x66\x5f\x70\x72\x69\
\x6e\x74\x6b\x28\x22\x48\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64\x21\x5c\x6e\
\x22\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x74\x72\x61\x63\x65\
\x70\x6f\x69\x6e\x74\x5f\x5f\x73\x79\x73\x63\x61\x6c\x6c\x73\x5f\x5f\x73\x79\
\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\x2e\x5f\x5f\x5f\x5f\
\x66\x6d\x74\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\
\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\
\x2c\0\0\0\x40\0\0\0\0\0\0\0\x08\0\0\0\xd7\0\0\0\x01\0\0\0\0\0\0\0\x0e\0\0\0\
\x10\0\0\0\xd7\0\0\0\x02\0\0\0\0\0\0\0\xfc\0\0\0\x35\x01\0\0\x02\x1c\0\0\x20\0\
\0\0\xfc\0\0\0\x54\x01\0\0\x02\x20\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x01\x7a\x52\0\
\x08\x7c\x0b\x01\x0c\0\0\0\x18\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\
\0\0\0\0\0\x8c\0\0\0\x04\0\x70\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\
\0\0\0\x01\0\0\x01\x76\x6d\x6c\x69\x6e\x75\x78\x2f\x61\x72\x6d\x36\x34\0\x62\
\x75\x69\x6c\x64\x5f\x64\x65\x70\x73\x2f\x6f\x75\x74\x70\x75\x74\x2f\x6c\x69\
\x62\x62\x70\x66\x2f\x62\x70\x66\0\0\x68\x65\x6c\x6c\x6f\x2e\x62\x70\x66\x2e\
\x63\0\0\0\0\x76\x6d\x6c\x69\x6e\x75\x78\x2e\x68\0\x01\0\0\x62\x70\x66\x5f\x68\
\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\x02\0\0\0\0\x09\x02\0\0\0\0\
\0\0\0\0\x17\x05\x02\x0a\x13\x4b\x02\x02\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xf0\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x39\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x45\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x0a\0\xc8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x72\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\xf3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x0a\0\x7a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x7f\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x0a\0\xa4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\xba\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\xad\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x0a\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\xef\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x62\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x0a\0\xf7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x41\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x44\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x0a\0\x5b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x35\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\xfb\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x0a\0\x0f\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\
\x23\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x31\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x0a\0\x15\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\x49\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\x05\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0\
\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x03\0\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1d\x01\0\0\x11\0\x06\0\0\0\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\x7a\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x1f\0\0\0\x06\0\0\0\0\0\0\0\x0a\0\0\0\x20\0\0\
\0\x0c\0\0\0\0\0\0\0\x0a\0\0\0\x02\0\0\0\x12\0\0\0\0\0\0\0\x0a\0\0\0\x03\0\0\0\
\x16\0\0\0\0\0\0\0\x0a\0\0\0\x21\0\0\0\x1a\0\0\0\0\0\0\0\x0a\0\0\0\x04\0\0\0\
\x1e\0\0\0\0\0\0\0\x01\0\0\0\x1e\0\0\0\x2b\0\0\0\0\0\0\0\x01\0\0\0\x1e\0\0\0\
\x39\0\0\0\0\0\0\0\x0a\0\0\0\x05\0\0\0\x44\0\0\0\0\0\0\0\x0a\0\0\0\x06\0\0\0\
\x50\0\0\0\0\0\0\0\x01\0\0\0\x1f\0\0\0\x59\0\0\0\0\0\0\0\x0a\0\0\0\x07\0\0\0\
\x76\0\0\0\0\0\0\0\x0a\0\0\0\x08\0\0\0\x7d\0\0\0\0\0\0\0\x0a\0\0\0\x09\0\0\0\
\x84\0\0\0\0\0\0\0\x0a\0\0\0\x0a\0\0\0\xaa\0\0\0\0\0\0\0\x0a\0\0\0\x0b\0\0\0\
\xba\0\0\0\0\0\0\0\x0a\0\0\0\x0c\0\0\0\xc1\0\0\0\0\0\0\0\x0a\0\0\0\x0d\0\0\0\
\xc8\0\0\0\0\0\0\0\x0a\0\0\0\x0e\0\0\0\xd4\0\0\0\0\0\0\0\x01\0\0\0\x22\0\0\0\
\xe9\0\0\0\0\0\0\0\x0a\0\0\0\x0f\0\0\0\xf5\0\0\0\0\0\0\0\x0a\0\0\0\x10\0\0\0\
\xfe\0\0\0\0\0\0\0\x0a\0\0\0\x11\0\0\0\x0b\x01\0\0\0\0\0\0\x0a\0\0\0\x12\0\0\0\
\x18\x01\0\0\0\0\0\0\x0a\0\0\0\x13\0\0\0\x25\x01\0\0\0\0\0\0\x0a\0\0\0\x14\0\0\
\0\x33\x01\0\0\0\0\0\0\x0a\0\0\0\x15\0\0\0\x3c\x01\0\0\0\0\0\0\x0a\0\0\0\x16\0\
\0\0\x49\x01\0\0\0\0\0\0\x0a\0\0\0\x17\0\0\0\x56\x01\0\0\0\0\0\0\x0a\0\0\0\x18\
\0\0\0\x63\x01\0\0\0\0\0\0\x0a\0\0\0\x19\0\0\0\x71\x01\0\0\0\0\0\0\x0a\0\0\0\
\x1a\0\0\0\x78\x01\0\0\0\0\0\0\x0a\0\0\0\x1b\0\0\0\x8b\x01\0\0\0\0\0\0\x0a\0\0\
\0\x1c\0\0\0\xc8\x01\0\0\0\0\0\0\x0a\0\0\0\x1f\0\0\0\xe0\x01\0\0\0\0\0\0\0\0\0\
\0\x22\0\0\0\x2c\0\0\0\0\0\0\0\0\0\0\0\x1e\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\x1e\
\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\x1e\0\0\0\x1c\0\0\0\0\0\0\0\x01\0\0\0\x1e\0\0\
\0\x7d\0\0\0\0\0\0\0\x01\0\0\0\x1e\0\0\0\x23\x1d\x22\0\x2e\x64\x65\x62\x75\x67\
\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\
\x54\x46\x2e\x65\x78\x74\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x5f\x5f\x73\
\x79\x73\x63\x61\x6c\x6c\x73\x5f\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\
\x65\x78\x65\x63\x76\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x64\x65\x62\x75\
\x67\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\
\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x74\x72\x61\x63\
\x65\x70\x6f\x69\x6e\x74\x5f\x5f\x73\x79\x73\x63\x61\x6c\x6c\x73\x5f\x5f\x73\
\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x2e\x72\x65\x6c\
\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\
\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x6c\x69\
\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\
\x65\0\x2e\x72\x65\x6c\x2e\x65\x68\x5f\x66\x72\x61\x6d\x65\0\x68\x65\x6c\x6c\
\x6f\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\
\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\
\x4c\x49\x43\x45\x4e\x53\x45\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xfc\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\x0f\0\0\0\0\0\0\x25\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\
\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa5\0\0\0\x01\0\0\0\x06\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa1\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x88\x0c\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x14\0\0\0\x03\0\0\0\x08\0\0\0\0\
\0\0\0\x10\0\0\0\0\0\0\0\x0c\x01\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x70\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xca\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7e\0\0\0\0\0\
\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\0\0\xda\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5c\x01\0\0\0\0\0\0\x9e\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5c\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x98\x0c\0\0\0\0\0\0\x10\x02\0\0\0\0\0\0\x14\0\0\0\x08\0\0\0\x08\
\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x51\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xfa\x02\0\0\0\0\0\0\x7c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\x01\0\0\0\0\0\0\0\x18\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x76\x04\0\0\0\0\0\0\x8e\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x14\x01\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x0e\0\0\
\0\0\0\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\x08\0\0\0\0\0\0\
\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\
\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0e\0\0\0\0\0\0\x30\0\0\0\0\0\0\
\0\x14\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xe6\0\0\0\x01\0\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x08\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe2\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xf8\x0e\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x14\0\0\0\x0f\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xd6\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x98\x08\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xd2\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\x0f\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x14\0\0\0\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x6c\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x18\
\x0f\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\x14\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x04\x01\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x09\0\0\0\0\
\0\0\x60\x03\0\0\0\0\0\0\x01\0\0\0\x22\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\
\0";
}

#ifdef __cplusplus
struct hello_bpf *hello_bpf::open(const struct bpf_object_open_opts *opts) { return hello_bpf__open_opts(opts); }
struct hello_bpf *hello_bpf::open_and_load() { return hello_bpf__open_and_load(); }
int hello_bpf::load(struct hello_bpf *skel) { return hello_bpf__load(skel); }
int hello_bpf::attach(struct hello_bpf *skel) { return hello_bpf__attach(skel); }
void hello_bpf::detach(struct hello_bpf *skel) { hello_bpf__detach(skel); }
void hello_bpf::destroy(struct hello_bpf *skel) { hello_bpf__destroy(skel); }
const void *hello_bpf::elf_bytes(size_t *sz) { return hello_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
hello_bpf__assert(struct hello_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __HELLO_BPF_SKEL_H__ */
